import sqlite3
import os
import shutil
from agent.agent import BabyNestAgent

DB_PATH = "db/database.db"
CHROMA_DB_PATH = "db/chromadb"

def setup_test_database():
    """
    Sets up a clean test database with sample data.
    This ensures the vector store has fresh content to index for the test.
    """
    print("--- Setting up test database ---")

    # Ensure the db directory exists
    if not os.path.exists("db"):
        os.makedirs("db")

    # Clean up old DB files for a fresh start
    if os.path.exists(DB_PATH):
        os.remove(DB_PATH)
    
    # Clean up old ChromaDB store
    if os.path.exists(CHROMA_DB_PATH):
        shutil.rmtree(CHROMA_DB_PATH)

    db = sqlite3.connect(DB_PATH)
    cursor = db.cursor()

    # Create necessary tables
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS weekly_symptoms (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        week_number INTEGER NOT NULL,
        symptom TEXT NOT NULL,
        note TEXT
    );
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS appointments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        appointment_date TEXT,
        appointment_time TEXT,
        appointment_location TEXT,
        appointment_status TEXT,
        content TEXT
    );
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS weekly_weight (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        week_number INTEGER,
        weight REAL,
        note TEXT
    );
    """)

    # Insert sample data that the agent can use as context
    symptoms_data = [
        (10, 'Morning Sickness', 'Feeling nauseous, especially in the mornings.'),
        (12, 'Fatigue', 'Feeling overwhelmingly tired throughout the day, even with enough sleep.'),
        (14, 'Food Cravings', 'Suddenly craving salty snacks and citrus fruits.')
    ]
    cursor.executemany("INSERT INTO weekly_symptoms (week_number, symptom, note) VALUES (?, ?, ?)", symptoms_data)

    appointments_data = [
        ('12-week NT Scan', '2025-08-01', '10:00', 'City Imaging Center', 'Confirmed', 'Nuchal translucency scan.'),
    ]
    cursor.executemany("INSERT INTO appointments (title, appointment_date, appointment_time, appointment_location, appointment_status, content) VALUES (?, ?, ?, ?, ?, ?)", appointments_data)

    db.commit()
    db.close()
    print("--- Test database setup complete. ---")


def run_agent_test():
    """
    Runs the agent with a sample query to test the ChromaDB integration.
    """
    print("\n--- Running BabyNest Agent Test ---")
    
    # 1. Instantiate the agent
    agent = BabyNestAgent()

    # 2. Define a query designed to trigger a vector search for a general symptom.
    # This query is not a specific command but a question that needs context.
    test_query = "I have been feeling exhausted and sleepy lately, what could be related?"

    print(f"\n[TEST] Sending query to agent: \"{test_query}\"")
    
    # 3. Run the agent
    response = agent.run(query=test_query, user_id="test_user_123")

    # 4. Print the final response from the agent
    print("\n[RESULT] Agent's Final Response:")
    print(f"> {response}")

    print("\n--- Test Verification ---")
    print("To confirm the test worked, check the console output generated by `llm.py`.")
    print("The printed prompt should contain a 'Context from Database' section.")
    print("This section should include the 'Fatigue' entry from our test data, like:")
    print("  'Symptom Week 12: Fatigue. Note: Feeling overwhelmingly tired...'\n")
    print("This confirms that the agent successfully updated the vector store, searched it based on your query, retrieved the relevant context, and passed it to the LLM.")
    print("\n--- Test Complete ---")


if __name__ == "__main__":
    setup_test_database()
    run_agent_test()

